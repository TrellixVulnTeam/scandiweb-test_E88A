{"ast":null,"code":"import { gql } from '@apollo/client';\nimport * as actionTypes from '../../constants/actionTypes';\nimport { client } from '../../utils/ClientApi';\nexport const requestProducts = categoryName => async dispatch => {\n  dispatch({\n    type: actionTypes.GET_PRODUCTS_START\n  });\n\n  try {\n    const result = (await client.query({\n      query: gql`\n                query getProducts {\n                    category(input: { title: \"${categoryName}\" }) {\n                        products {\n                            id\n                            name\n                            inStock\n                            gallery\n                            description\n                            category\n                            brand\n                            prices {\n                                amount\n                                currency\n                            }\n                            attributes {\n                                name\n                                id\n                                type\n                                items {\n                                    displayValue\n                                    value\n                                    id\n                                  }\n                            }\n                        }\n                    }\n                }\n            `\n    })) || 0;\n\n    if (result.data.category === null) {\n      categoryName = \"all\";\n    }\n\n    dispatch({\n      type: actionTypes.GET_PRODUCTS_SUCCESS,\n      payload: result.data.category.products\n    });\n  } catch (e) {\n    dispatch({\n      type: actionTypes.GET_PRODUCTS_FAILED\n    });\n  }\n};\nexport const addProductAttribute = productAttribute => dispatch => dispatch({\n  type: actionTypes.ADD_PRODUCT_ATTRIBUTE,\n  payload: productAttribute\n});","map":{"version":3,"sources":["/Users/val/work/scandiweb-test/src/redux/actions/products.js"],"names":["gql","actionTypes","client","requestProducts","categoryName","dispatch","type","GET_PRODUCTS_START","result","query","data","category","GET_PRODUCTS_SUCCESS","payload","products","e","GET_PRODUCTS_FAILED","addProductAttribute","productAttribute","ADD_PRODUCT_ATTRIBUTE"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,WAAZ,MAA6B,6BAA7B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AAEA,OAAO,MAAMC,eAAe,GAAIC,YAAD,IAAkB,MAAMC,QAAN,IAAkB;AAC/DA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEL,WAAW,CAACM;AAApB,GAAD,CAAR;;AACA,MAAI;AACA,UAAMC,MAAM,GAAI,OAAMN,MAAM,CAACO,KAAP,CAAa;AAC/BA,MAAAA,KAAK,EAAET,GAAI;AACvB;AACA,gDAAgDI,YAAa;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7B2C,KAAb,CAAN,KA8BV,CA9BN;;AA+BA,QAAII,MAAM,CAACE,IAAP,CAAYC,QAAZ,KAAyB,IAA7B,EAAmC;AAC/BP,MAAAA,YAAY,GAAG,KAAf;AACH;;AACDC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,WAAW,CAACW,oBAApB;AAA0CC,MAAAA,OAAO,EAAEL,MAAM,CAACE,IAAP,CAAYC,QAAZ,CAAqBG;AAAxE,KAAD,CAAR;AACH,GApCD,CAoCE,OAAOC,CAAP,EAAU;AACRV,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,WAAW,CAACe;AAApB,KAAD,CAAR;AACH;AACJ,CAzCM;AA2CP,OAAO,MAAMC,mBAAmB,GAAGC,gBAAgB,IAAIb,QAAQ,IAAIA,QAAQ,CAAC;AAAEC,EAAAA,IAAI,EAAEL,WAAW,CAACkB,qBAApB;AAA2CN,EAAAA,OAAO,EAAEK;AAApD,CAAD,CAApE","sourcesContent":["import { gql } from '@apollo/client';\nimport * as actionTypes from '../../constants/actionTypes'\nimport { client } from '../../utils/ClientApi';\n\nexport const requestProducts = (categoryName) => async dispatch => {\n    dispatch({ type: actionTypes.GET_PRODUCTS_START });\n    try {\n        const result = (await client.query({\n            query: gql`\n                query getProducts {\n                    category(input: { title: \"${categoryName}\" }) {\n                        products {\n                            id\n                            name\n                            inStock\n                            gallery\n                            description\n                            category\n                            brand\n                            prices {\n                                amount\n                                currency\n                            }\n                            attributes {\n                                name\n                                id\n                                type\n                                items {\n                                    displayValue\n                                    value\n                                    id\n                                  }\n                            }\n                        }\n                    }\n                }\n            `\n        }) || 0);\n        if (result.data.category === null) {\n            categoryName = \"all\"\n        }\n        dispatch({ type: actionTypes.GET_PRODUCTS_SUCCESS, payload: result.data.category.products });\n    } catch (e) {\n        dispatch({ type: actionTypes.GET_PRODUCTS_FAILED });\n    }\n}\n\nexport const addProductAttribute = productAttribute => dispatch => dispatch({ type: actionTypes.ADD_PRODUCT_ATTRIBUTE, payload: productAttribute });\n"]},"metadata":{},"sourceType":"module"}