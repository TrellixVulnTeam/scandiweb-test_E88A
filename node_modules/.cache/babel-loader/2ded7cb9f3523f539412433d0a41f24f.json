{"ast":null,"code":"import { gql } from '@apollo/client';\nimport * as actionTypes from '../../constants/actionTypes';\nimport { client } from '../../utils/ClientApi';\nexport const requestProducts = categoryName => async dispatch => {\n  dispatch({\n    type: actionTypes.GET_PRODUCTS_START\n  });\n\n  try {\n    if (categoryName !== \"all\") {\n      console.log('ha');\n    } else {\n      const result = await client.query({\n        query: gql`\n                query getProducts {\n                    category {\n                        products {\n                            id\n                            name\n                            inStock\n                            gallery\n                            description\n                            category\n                            brand\n                            prices {\n                                amount\n                                currency\n                            }\n                            attributes {\n                                name\n                                id\n                                type\n                                items {\n                                    displayValue\n                                    value\n                                    id\n                                  }\n                            }\n                        }\n                    }\n                }\n            `\n      });\n    }\n\n    console.log(result.data.category.products);\n    dispatch({\n      type: actionTypes.GET_PRODUCTS_SUCCESS,\n      payload: result.data.category.products\n    });\n  } catch (e) {\n    dispatch({\n      type: actionTypes.GET_PRODUCTS_FAILED\n    });\n  }\n};\nexport const addProductAttribute = productAttribute => dispatch => dispatch({\n  type: actionTypes.ADD_PRODUCT_ATTRIBUTE,\n  payload: productAttribute\n});","map":{"version":3,"sources":["/Users/val/work/scandiweb-test/src/redux/actions/products.js"],"names":["gql","actionTypes","client","requestProducts","categoryName","dispatch","type","GET_PRODUCTS_START","console","log","result","query","data","category","products","GET_PRODUCTS_SUCCESS","payload","e","GET_PRODUCTS_FAILED","addProductAttribute","productAttribute","ADD_PRODUCT_ATTRIBUTE"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,WAAZ,MAA6B,6BAA7B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AAEA,OAAO,MAAMC,eAAe,GAAIC,YAAD,IAAkB,MAAMC,QAAN,IAAkB;AAC/DA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEL,WAAW,CAACM;AAApB,GAAD,CAAR;;AACA,MAAI;AACA,QAAIH,YAAY,KAAK,KAArB,EAA4B;AACxBI,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACH,KAFD,MAEO;AACP,YAAMC,MAAM,GAAG,MAAMR,MAAM,CAACS,KAAP,CAAa;AAC9BA,QAAAA,KAAK,EAAEX,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7B0C,OAAb,CAArB;AA+BH;;AACGQ,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACE,IAAP,CAAYC,QAAZ,CAAqBC,QAAjC;AACAT,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,WAAW,CAACc,oBAApB;AAA0CC,MAAAA,OAAO,EAAEN,MAAM,CAACE,IAAP,CAAYC,QAAZ,CAAqBC;AAAxE,KAAD,CAAR;AACH,GAtCD,CAsCE,OAAOG,CAAP,EAAU;AACRZ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,WAAW,CAACiB;AAApB,KAAD,CAAR;AACH;AACJ,CA3CM;AA6CP,OAAO,MAAMC,mBAAmB,GAAGC,gBAAgB,IAAIf,QAAQ,IAAIA,QAAQ,CAAC;AAAEC,EAAAA,IAAI,EAAEL,WAAW,CAACoB,qBAApB;AAA2CL,EAAAA,OAAO,EAAEI;AAApD,CAAD,CAApE","sourcesContent":["import { gql } from '@apollo/client';\nimport * as actionTypes from '../../constants/actionTypes'\nimport { client } from '../../utils/ClientApi';\n\nexport const requestProducts = (categoryName) => async dispatch => {\n    dispatch({ type: actionTypes.GET_PRODUCTS_START });\n    try {\n        if (categoryName !== \"all\") {\n            console.log('ha')\n        } else {\n        const result = await client.query({\n            query: gql`\n                query getProducts {\n                    category {\n                        products {\n                            id\n                            name\n                            inStock\n                            gallery\n                            description\n                            category\n                            brand\n                            prices {\n                                amount\n                                currency\n                            }\n                            attributes {\n                                name\n                                id\n                                type\n                                items {\n                                    displayValue\n                                    value\n                                    id\n                                  }\n                            }\n                        }\n                    }\n                }\n            `\n        });\n    }\n        console.log(result.data.category.products)\n        dispatch({ type: actionTypes.GET_PRODUCTS_SUCCESS, payload: result.data.category.products });\n    } catch (e) {\n        dispatch({ type: actionTypes.GET_PRODUCTS_FAILED });\n    }\n}\n\nexport const addProductAttribute = productAttribute => dispatch => dispatch({ type: actionTypes.ADD_PRODUCT_ATTRIBUTE, payload: productAttribute });\n"]},"metadata":{},"sourceType":"module"}