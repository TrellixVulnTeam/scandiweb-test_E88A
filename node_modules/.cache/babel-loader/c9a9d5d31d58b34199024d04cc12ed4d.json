{"ast":null,"code":"var _jsxFileName = \"/Users/val/work/scandiweb-test/src/components/product/ToggleButtons.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ToggleButtons extends React.Component {\n  // setButtonClassName = (type, value, id) => {\n  //     if (this.props.attributes[id] === value) {\n  //         return type === \"swatch\" ? \"attribute-color-active\" : \"attribute-text-active\";\n  //     } else {\n  //         return \"attribute-button\";\n  //     }\n  // }\n  render() {\n    const {\n      product,\n      attributes,\n      setAttributes\n    } = this.props;\n\n    if (product) {\n      return product.attributes.map(attribute => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"attribute-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: attribute.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"attributes-wrapper\",\n          children: attribute.items.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setAttributes({ ...attributes,\n              [attribute.id]: item.value\n            }),\n            className: this.setButtonClassName(attribute.type, item.value, attribute.id),\n            style: { ...(attribute.type === \"swatch\" ? {\n                backgroundColor: item.value\n              } : \"\")\n            },\n            children: attribute.type === \"swatch\" ? \"\" : item.value\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 46\n          }, this))\n        }, attribute.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 25\n        }, this)]\n      }, attribute.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 21\n      }, this));\n    }\n\n    return null;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    products: state.products.list\n  };\n};\n\nexport default connect(mapStateToProps)(ToggleButtons);","map":{"version":3,"sources":["/Users/val/work/scandiweb-test/src/components/product/ToggleButtons.jsx"],"names":["React","connect","ToggleButtons","Component","render","product","attributes","setAttributes","props","map","attribute","id","items","item","value","setButtonClassName","type","backgroundColor","mapStateToProps","state","products","list"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAEA,MAAMC,aAAN,SAA4BF,KAAK,CAACG,SAAlC,CAA4C;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,MAAM,GAAG;AAEL,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,UAAX;AAAuBC,MAAAA;AAAvB,QAAyC,KAAKC,KAApD;;AAEA,QAAIH,OAAJ,EAAa;AACT,aACIA,OAAO,CAACC,UAAR,CAAmBG,GAAnB,CAAuBC,SAAS,iBAC5B;AAAwB,QAAA,SAAS,EAAC,mBAAlC;AAAA,gCACI;AAAA,oBAAKA,SAAS,CAACC;AAAf;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,oBAAf;AAAA,oBACKD,SAAS,CAACE,KAAV,CACIH,GADJ,CACQI,IAAI,iBAAI;AACT,YAAA,OAAO,EAAE,MAAMN,aAAa,CAAC,EACzB,GAAGD,UADsB;AAEzB,eAACI,SAAS,CAACC,EAAX,GAAgBE,IAAI,CAACC;AAFI,aAAD,CADnB;AAKT,YAAA,SAAS,EAAE,KAAKC,kBAAL,CAAwBL,SAAS,CAACM,IAAlC,EAAwCH,IAAI,CAACC,KAA7C,EAAoDJ,SAAS,CAACC,EAA9D,CALF;AAOT,YAAA,KAAK,EAAE,EAAE,IAAGD,SAAS,CAACM,IAAV,KAAmB,QAAnB,GAA8B;AAAEC,gBAAAA,eAAe,EAAEJ,IAAI,CAACC;AAAxB,eAA9B,GAAgE,EAAnE;AAAF,aAPE;AAAA,sBASRJ,SAAS,CAACM,IAAV,KAAmB,QAAnB,GAA8B,EAA9B,GAAmCH,IAAI,CAACC;AAThC,aAMJD,IAAI,CAACF,EAND;AAAA;AAAA;AAAA;AAAA,kBADhB;AADL,WAAyCD,SAAS,CAACC,EAAnD;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,SAAUD,SAAS,CAACC,EAApB;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ;AAuBH;;AACD,WAAO,IAAP;AACH;;AAxCuC;;AA2C5C,MAAMO,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHC,IAAAA,QAAQ,EAAED,KAAK,CAACC,QAAN,CAAeC;AADtB,GAAP;AAGH,CAJD;;AAMA,eAAepB,OAAO,CAClBiB,eADkB,CAAP,CAEbhB,aAFa,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nclass ToggleButtons extends React.Component {\n\n    // setButtonClassName = (type, value, id) => {\n    //     if (this.props.attributes[id] === value) {\n    //         return type === \"swatch\" ? \"attribute-color-active\" : \"attribute-text-active\";\n    //     } else {\n    //         return \"attribute-button\";\n    //     }\n    // }\n\n    render() {\n\n        const { product, attributes, setAttributes } = this.props;\n\n        if (product) {\n            return (\n                product.attributes.map(attribute =>\n                    <div key={attribute.id} className=\"attribute-buttons\">\n                        <h4>{attribute.id}</h4>\n                        <div className=\"attributes-wrapper\" key={attribute.id}>\n                            {attribute.items\n                                .map(item => <button\n                                    onClick={() => setAttributes({\n                                        ...attributes,\n                                        [attribute.id]: item.value\n                                    })}\n                                    className={this.setButtonClassName(attribute.type, item.value, attribute.id)}\n                                    key={item.id}\n                                    style={{ ...attribute.type === \"swatch\" ? { backgroundColor: item.value } : \"\" }}\n                                >\n                                    {attribute.type === \"swatch\" ? \"\" : item.value}\n                                </button>\n                                )}\n                        </div>\n                    </div>\n    \n                )\n            );   \n        }\n        return null;\n    }\n}\n\nconst mapStateToProps = state => {\n    return { \n        products: state.products.list,\n    };\n};\n\nexport default connect(\n    mapStateToProps\n)(ToggleButtons);"]},"metadata":{},"sourceType":"module"}