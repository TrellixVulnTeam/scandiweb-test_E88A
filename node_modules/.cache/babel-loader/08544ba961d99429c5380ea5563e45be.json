{"ast":null,"code":"var _jsxFileName = \"/Users/val/work/scandiweb-test/my-app/src/components/ToggleButtons.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ToggleButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidUpdate() {\n    console.log(this.state);\n  }\n\n  render() {\n    const setButtonClassName = (type, value, id) => {\n      if (this.state[id] === value) {\n        return type === \"swatch\" ? \"attribute-color-active\" : \"attribute-text-active\";\n      } else {\n        return \"attribute-button\";\n      }\n    };\n\n    console.log(this.props);\n\n    if (this.props.product) {\n      return this.props.product.attributes.map(attribute => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"attribute-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: attribute.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"attributes-wrapper\",\n          children: attribute.items.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              this.setState({\n                [attribute.id]: item.value\n              });\n            },\n            className: setButtonClassName(attribute.type, item.value, attribute.id),\n            style: { ...(attribute.type === \"swatch\" ? {\n                backgroundColor: item.value\n              } : \"\")\n            },\n            children: attribute.type === \"swatch\" ? \"\" : item.value\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 46\n          }, this))\n        }, attribute.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }, this));\n    }\n\n    return null;\n  }\n\n}","map":{"version":3,"sources":["/Users/val/work/scandiweb-test/my-app/src/components/ToggleButtons.jsx"],"names":["React","ToggleButtons","Component","constructor","props","state","componentDidUpdate","console","log","render","setButtonClassName","type","value","id","product","attributes","map","attribute","items","item","setState","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,aAAN,SAA4BD,KAAK,CAACE,SAAlC,CAA4C;AAC/CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AAEH;;AAEDC,EAAAA,kBAAkB,GAAG;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAjB;AACH;;AAEDI,EAAAA,MAAM,GAAG;AACL,UAAMC,kBAAkB,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,EAAd,KAAqB;AAC5C,UAAI,KAAKR,KAAL,CAAWQ,EAAX,MAAmBD,KAAvB,EAA8B;AAC1B,eAAOD,IAAI,KAAK,QAAT,GAAoB,wBAApB,GAA+C,uBAAtD;AACH,OAFD,MAEO;AACH,eAAO,kBAAP;AACH;AACJ,KAND;;AAOAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAjB;;AACA,QAAI,KAAKA,KAAL,CAAWU,OAAf,EAAwB;AACpB,aACI,KAAKV,KAAL,CAAWU,OAAX,CAAmBC,UAAnB,CAA8BC,GAA9B,CAAkCC,SAAS,iBACvC;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,gCACI;AAAA,oBAAKA,SAAS,CAACJ;AAAf;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,oBAAf;AAAA,oBACKI,SAAS,CAACC,KAAV,CACIF,GADJ,CACQG,IAAI,iBAAI;AACT,YAAA,OAAO,EAAE,MAAM;AACX,mBAAKC,QAAL,CAAc;AACV,iBAACH,SAAS,CAACJ,EAAX,GAAgBM,IAAI,CAACP;AADX,eAAd;AAGH,aALQ;AAMT,YAAA,SAAS,EAAEF,kBAAkB,CAACO,SAAS,CAACN,IAAX,EAAiBQ,IAAI,CAACP,KAAtB,EAA6BK,SAAS,CAACJ,EAAvC,CANpB;AAQT,YAAA,KAAK,EAAE,EAAE,IAAGI,SAAS,CAACN,IAAV,KAAmB,QAAnB,GAA8B;AAAEU,gBAAAA,eAAe,EAAEF,IAAI,CAACP;AAAxB,eAA9B,GAAgE,EAAnE;AAAF,aARE;AAAA,sBAURK,SAAS,CAACN,IAAV,KAAmB,QAAnB,GAA8B,EAA9B,GAAmCQ,IAAI,CAACP;AAVhC,aAOJO,IAAI,CAACN,EAPD;AAAA;AAAA;AAAA;AAAA,kBADhB;AADL,WAAyCI,SAAS,CAACJ,EAAnD;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ;AAwBH;;AACD,WAAO,IAAP;AACH;;AA/C8C","sourcesContent":["import React from \"react\";\n\nexport class ToggleButtons extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        }\n    }\n\n    componentDidUpdate() {\n        console.log(this.state)\n    }\n\n    render() {\n        const setButtonClassName = (type, value, id) => {\n            if (this.state[id] === value) {\n                return type === \"swatch\" ? \"attribute-color-active\" : \"attribute-text-active\";\n            } else {\n                return \"attribute-button\";\n            }\n        }\n        console.log(this.props)\n        if (this.props.product) {\n            return (\n                this.props.product.attributes.map(attribute =>\n                    <div className=\"attribute-buttons\">\n                        <h4>{attribute.id}</h4>\n                        <div className=\"attributes-wrapper\" key={attribute.id}>\n                            {attribute.items\n                                .map(item => <button\n                                    onClick={() => {\n                                        this.setState({\n                                            [attribute.id]: item.value\n                                        });\n                                    }}\n                                    className={setButtonClassName(attribute.type, item.value, attribute.id)}\n                                    key={item.id}\n                                    style={{ ...attribute.type === \"swatch\" ? { backgroundColor: item.value } : \"\" }}\n                                >\n                                    {attribute.type === \"swatch\" ? \"\" : item.value}\n                                </button>\n                                )}\n                        </div>\n                    </div>\n    \n                )\n            );   \n        }\n        return null;\n    }\n}"]},"metadata":{},"sourceType":"module"}