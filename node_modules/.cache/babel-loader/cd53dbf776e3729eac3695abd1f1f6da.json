{"ast":null,"code":"import { gql } from '@apollo/client';\nimport * as actionTypes from '../../constants/actionTypes';\nimport { client } from '../../utils/ClientApi';\nexport const requestProducts = categoryName => async dispatch => {\n  dispatch({\n    type: actionTypes.GET_PRODUCTS_START\n  });\n\n  try {\n    const result = [];\n\n    switch (categoryName) {\n      case \"all\":\n        console.log(123);\n        result = await client.query({\n          query: gql`\n                        query getProducts {\n                            category {\n                                products {\n                                    id\n                                    name\n                                    inStock\n                                    gallery\n                                    description\n                                    category\n                                    brand\n                                    prices {\n                                        amount\n                                        currency\n                                    }\n                                    attributes {\n                                        name\n                                        id\n                                        type\n                                        items {\n                                            displayValue\n                                            value\n                                            id\n                                          }\n                                    }\n                                }\n                            }\n                        }\n                    `\n        });\n\n      default:\n        result = await client.query({\n          query: gql`\n                        query getProducts {\n                            category(input: { title: \"${categoryName}\" }) {\n                                products {\n                                    id\n                                    name\n                                    inStock\n                                    gallery\n                                    description\n                                    category\n                                    brand\n                                    prices {\n                                        amount\n                                        currency\n                                    }\n                                    attributes {\n                                        name\n                                        id\n                                        type\n                                        items {\n                                            displayValue\n                                            value\n                                            id\n                                          }\n                                    }\n                                }\n                            }\n                        }\n                    `\n        });\n    }\n\n    console.log(result.data.category.products);\n    dispatch({\n      type: actionTypes.GET_PRODUCTS_SUCCESS,\n      payload: result.data.category.products\n    });\n  } catch (e) {\n    dispatch({\n      type: actionTypes.GET_PRODUCTS_FAILED\n    });\n  }\n};\nexport const addProductAttribute = productAttribute => dispatch => dispatch({\n  type: actionTypes.ADD_PRODUCT_ATTRIBUTE,\n  payload: productAttribute\n});","map":{"version":3,"sources":["/Users/val/work/scandiweb-test/src/redux/actions/products.js"],"names":["gql","actionTypes","client","requestProducts","categoryName","dispatch","type","GET_PRODUCTS_START","result","console","log","query","data","category","products","GET_PRODUCTS_SUCCESS","payload","e","GET_PRODUCTS_FAILED","addProductAttribute","productAttribute","ADD_PRODUCT_ATTRIBUTE"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,WAAZ,MAA6B,6BAA7B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AAEA,OAAO,MAAMC,eAAe,GAAIC,YAAD,IAAkB,MAAMC,QAAN,IAAkB;AAC/DA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEL,WAAW,CAACM;AAApB,GAAD,CAAR;;AACA,MAAI;AACA,UAAMC,MAAM,GAAG,EAAf;;AACA,YAAQJ,YAAR;AACI,WAAK,KAAL;AACIK,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACAF,QAAAA,MAAM,GAAG,MAAMN,MAAM,CAACS,KAAP,CAAa;AACxBA,UAAAA,KAAK,EAAEX,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7B4C,SAAb,CAAf;;AA+BJ;AACIQ,QAAAA,MAAM,GAAG,MAAMN,MAAM,CAACS,KAAP,CAAa;AACxBA,UAAAA,KAAK,EAAEX,GAAI;AAC/B;AACA,wDAAwDI,YAAa;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7B4C,SAAb,CAAf;AAnCR;;AAmEAK,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACI,IAAP,CAAYC,QAAZ,CAAqBC,QAAjC;AACAT,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,WAAW,CAACc,oBAApB;AAA0CC,MAAAA,OAAO,EAAER,MAAM,CAACI,IAAP,CAAYC,QAAZ,CAAqBC;AAAxE,KAAD,CAAR;AACH,GAvED,CAuEE,OAAOG,CAAP,EAAU;AACRZ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,WAAW,CAACiB;AAApB,KAAD,CAAR;AACH;AACJ,CA5EM;AA8EP,OAAO,MAAMC,mBAAmB,GAAGC,gBAAgB,IAAIf,QAAQ,IAAIA,QAAQ,CAAC;AAAEC,EAAAA,IAAI,EAAEL,WAAW,CAACoB,qBAApB;AAA2CL,EAAAA,OAAO,EAAEI;AAApD,CAAD,CAApE","sourcesContent":["import { gql } from '@apollo/client';\nimport * as actionTypes from '../../constants/actionTypes'\nimport { client } from '../../utils/ClientApi';\n\nexport const requestProducts = (categoryName) => async dispatch => {\n    dispatch({ type: actionTypes.GET_PRODUCTS_START });\n    try {\n        const result = [];\n        switch (categoryName) {\n            case \"all\":\n                console.log(123)\n                result = await client.query({\n                    query: gql`\n                        query getProducts {\n                            category {\n                                products {\n                                    id\n                                    name\n                                    inStock\n                                    gallery\n                                    description\n                                    category\n                                    brand\n                                    prices {\n                                        amount\n                                        currency\n                                    }\n                                    attributes {\n                                        name\n                                        id\n                                        type\n                                        items {\n                                            displayValue\n                                            value\n                                            id\n                                          }\n                                    }\n                                }\n                            }\n                        }\n                    `\n                });\n            default:\n                result = await client.query({\n                    query: gql`\n                        query getProducts {\n                            category(input: { title: \"${categoryName}\" }) {\n                                products {\n                                    id\n                                    name\n                                    inStock\n                                    gallery\n                                    description\n                                    category\n                                    brand\n                                    prices {\n                                        amount\n                                        currency\n                                    }\n                                    attributes {\n                                        name\n                                        id\n                                        type\n                                        items {\n                                            displayValue\n                                            value\n                                            id\n                                          }\n                                    }\n                                }\n                            }\n                        }\n                    `\n                });\n            }\n        console.log(result.data.category.products)\n        dispatch({ type: actionTypes.GET_PRODUCTS_SUCCESS, payload: result.data.category.products });\n    } catch (e) {\n        dispatch({ type: actionTypes.GET_PRODUCTS_FAILED });\n    }\n}\n\nexport const addProductAttribute = productAttribute => dispatch => dispatch({ type: actionTypes.ADD_PRODUCT_ATTRIBUTE, payload: productAttribute });\n"]},"metadata":{},"sourceType":"module"}