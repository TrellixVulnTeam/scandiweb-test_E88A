{"ast":null,"code":"var _jsxFileName = \"/Users/val/work/scandiweb-test/my-app/src/components/cart/CartPage.jsx\";\nimport React from \"react\";\nimport Wrapper from \"../Wrapper\";\nimport { connect } from \"react-redux\";\nimport { addCartItem } from \"../../redux/actions/cart\";\nimport ToggleButtons from \"../product/ToggleButtons\";\nimport { currenciesSymbols } from \"../../constants\";\nimport { ValuesOfCorrectTypeRule } from \"graphql\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CartPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.setButtonClassName = (type, value, id) => {\n      console.log(id, value[value.id]); // if (this.props.attributes[id] === value) {\n      //     return type === \"swatch\" ? \"attribute-color-active\" : \"attribute-text-active\";\n      // } else {\n      //     return \"attribute-button\";\n      // }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"cart-title\",\n        children: \"cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), this.props.cartItems.map(item => {\n        var _item$prices$find;\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cart-item-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"product-info product-info-cart\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: item.brand\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"price\",\n              children: [currenciesSymbols[this.props.selectedCurrency] || '$', \" \", (_item$prices$find = item.prices.find(x => x.currency === this.props.selectedCurrency)) === null || _item$prices$find === void 0 ? void 0 : _item$prices$find.amount]\n            }, Math.random(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 33\n            }, this), item.attributes.map(attribute => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: attribute.items.map(attr => /*#__PURE__*/_jsxDEV(\"button\", {\n                className: this.setButtonClassName(attribute.type, attribute.items, item.attrValues),\n                style: { ...(attribute.type === \"swatch\" ? {\n                    backgroundColor: attr.value\n                  } : \"\")\n                },\n                children: attribute.type === \"swatch\" ? \"\" : attr.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 73\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 70\n            }, this))]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedCurrency: state.currencies.selected,\n    cartItems: state.cart.list,\n    products: state.products.list\n  };\n};\n\nexport default connect(mapStateToProps, {\n  addCartItem\n})(CartPage);","map":{"version":3,"sources":["/Users/val/work/scandiweb-test/my-app/src/components/cart/CartPage.jsx"],"names":["React","Wrapper","connect","addCartItem","ToggleButtons","currenciesSymbols","ValuesOfCorrectTypeRule","CartPage","Component","setButtonClassName","type","value","id","console","log","render","props","cartItems","map","item","brand","name","selectedCurrency","prices","find","x","currency","amount","Math","random","attributes","attribute","items","attr","attrValues","backgroundColor","mapStateToProps","state","currencies","selected","cart","list","products"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Wrapper from \"../Wrapper\";\nimport { connect } from \"react-redux\";\nimport { addCartItem } from \"../../redux/actions/cart\";\nimport ToggleButtons from \"../product/ToggleButtons\";\nimport { currenciesSymbols } from \"../../constants\";\nimport { ValuesOfCorrectTypeRule } from \"graphql\";\n\nclass CartPage extends React.Component {\n\n    setButtonClassName = (type, value, id) => {\n        console.log(id, value[value.id])\n        // if (this.props.attributes[id] === value) {\n        //     return type === \"swatch\" ? \"attribute-color-active\" : \"attribute-text-active\";\n        // } else {\n        //     return \"attribute-button\";\n        // }\n    }\n    \n    render() {\n        return (\n            <Wrapper>\n                <p className=\"cart-title\">cart</p>\n\n                {\n                    this.props.cartItems.map(item =>\n                        <div className=\"cart-item-container\">\n                            <div key={item.id} className=\"product-info product-info-cart\">\n                                <h3>{item.brand}</h3>\n                                <p>{item.name}</p>\n                                <p key={Math.random()} className=\"price\">\n                                    {currenciesSymbols[this.props.selectedCurrency] || '$'} {item.prices.find(x => x.currency === this.props.selectedCurrency)?.amount}\n                                </p>\n                                {\n                                    item.attributes.map(attribute => <div>\n                                        {\n                                            attribute.items.map(attr => <button\n                                            className={this.setButtonClassName(attribute.type, attribute.items, item.attrValues)}\n                                            style={{ ...attribute.type === \"swatch\" ? { backgroundColor: attr.value } : \"\" }}\n                                            >{attribute.type === \"swatch\" ? \"\" : attr.value}</button>\n                                            )}\n                                    </div>)\n                                }\n                            </div>\n                        </div>\n                    )\n                }\n            </Wrapper>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        selectedCurrency: state.currencies.selected,\n        cartItems: state.cart.list,\n        products: state.products.list,\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    { addCartItem }\n)(CartPage);"]},"metadata":{},"sourceType":"module"}