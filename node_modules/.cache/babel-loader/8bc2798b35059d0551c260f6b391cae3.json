{"ast":null,"code":"var _jsxFileName = \"/Users/val/work/scandiweb-test/my-app/src/components/ToggleButtons.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addProductAttribute } from \"../redux/actions/products\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ToggleButtons extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.setButtonClassName = (type, value, id) => {\n      if (this.props[id] === value) {\n        console.log(88);\n        return type === \"swatch\" ? \"attribute-color-active\" : \"attribute-text-active\";\n      } else {\n        console.log(99);\n        return \"attribute-button\";\n      }\n    };\n  }\n\n  render() {\n    const {\n      product,\n      attributes,\n      setAttributes\n    } = this.props;\n\n    if (product) {\n      return product.attributes.map(attribute => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"attribute-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: attribute.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"attributes-wrapper\",\n          children: attribute.items.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setAttributes({ ...attributes,\n              [attribute.id]: item.value\n            }),\n            className: this.setButtonClassName(attribute.type, item.value, attribute.id),\n            style: { ...(attribute.type === \"swatch\" ? {\n                backgroundColor: item.value\n              } : \"\")\n            },\n            children: attribute.type === \"swatch\" ? \"\" : item.value\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 46\n          }, this))\n        }, attribute.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }, this));\n    }\n\n    return null;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    products: state.products.list\n  };\n};\n\nexport default connect(mapStateToProps)(ToggleButtons);","map":{"version":3,"sources":["/Users/val/work/scandiweb-test/my-app/src/components/ToggleButtons.jsx"],"names":["React","connect","addProductAttribute","ToggleButtons","Component","setButtonClassName","type","value","id","props","console","log","render","product","attributes","setAttributes","map","attribute","items","item","backgroundColor","mapStateToProps","state","products","list"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,mBAAT,QAAoC,2BAApC;;;AAEA,MAAMC,aAAN,SAA4BH,KAAK,CAACI,SAAlC,CAA4C;AAAA;AAAA;;AAAA,SAExCC,kBAFwC,GAEnB,CAACC,IAAD,EAAOC,KAAP,EAAcC,EAAd,KAAqB;AACtC,UAAI,KAAKC,KAAL,CAAWD,EAAX,MAAmBD,KAAvB,EAA8B;AAC1BG,QAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACA,eAAOL,IAAI,KAAK,QAAT,GAAoB,wBAApB,GAA+C,uBAAtD;AACH,OAHD,MAGO;AACHI,QAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACA,eAAO,kBAAP;AACH;AACJ,KAVuC;AAAA;;AAYxCC,EAAAA,MAAM,GAAG;AAEL,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,UAAX;AAAuBC,MAAAA;AAAvB,QAAyC,KAAKN,KAApD;;AAEA,QAAII,OAAJ,EAAa;AACT,aACIA,OAAO,CAACC,UAAR,CAAmBE,GAAnB,CAAuBC,SAAS,iBAC5B;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,gCACI;AAAA,oBAAKA,SAAS,CAACT;AAAf;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,oBAAf;AAAA,oBACKS,SAAS,CAACC,KAAV,CACIF,GADJ,CACQG,IAAI,iBAAI;AACT,YAAA,OAAO,EAAE,MAAMJ,aAAa,CAAC,EACzB,GAAGD,UADsB;AAEzB,eAACG,SAAS,CAACT,EAAX,GAAgBW,IAAI,CAACZ;AAFI,aAAD,CADnB;AAKT,YAAA,SAAS,EAAE,KAAKF,kBAAL,CAAwBY,SAAS,CAACX,IAAlC,EAAwCa,IAAI,CAACZ,KAA7C,EAAoDU,SAAS,CAACT,EAA9D,CALF;AAOT,YAAA,KAAK,EAAE,EAAE,IAAGS,SAAS,CAACX,IAAV,KAAmB,QAAnB,GAA8B;AAAEc,gBAAAA,eAAe,EAAED,IAAI,CAACZ;AAAxB,eAA9B,GAAgE,EAAnE;AAAF,aAPE;AAAA,sBASRU,SAAS,CAACX,IAAV,KAAmB,QAAnB,GAA8B,EAA9B,GAAmCa,IAAI,CAACZ;AAThC,aAMJY,IAAI,CAACX,EAND;AAAA;AAAA;AAAA;AAAA,kBADhB;AADL,WAAyCS,SAAS,CAACT,EAAnD;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ;AAuBH;;AACD,WAAO,IAAP;AACH;;AA1CuC;;AA6C5C,MAAMa,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHC,IAAAA,QAAQ,EAAED,KAAK,CAACC,QAAN,CAAeC;AADtB,GAAP;AAGH,CAJD;;AAMA,eAAevB,OAAO,CAClBoB,eADkB,CAAP,CAEblB,aAFa,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addProductAttribute } from \"../redux/actions/products\"\n\nclass ToggleButtons extends React.Component {\n\n    setButtonClassName = (type, value, id) => {\n        if (this.props[id] === value) {\n            console.log(88)\n            return type === \"swatch\" ? \"attribute-color-active\" : \"attribute-text-active\";\n        } else {\n            console.log(99)\n            return \"attribute-button\";\n        }\n    }\n\n    render() {\n\n        const { product, attributes, setAttributes } = this.props\n\n        if (product) {\n            return (\n                product.attributes.map(attribute =>\n                    <div className=\"attribute-buttons\">\n                        <h4>{attribute.id}</h4>\n                        <div className=\"attributes-wrapper\" key={attribute.id}>\n                            {attribute.items\n                                .map(item => <button\n                                    onClick={() => setAttributes({\n                                        ...attributes,\n                                        [attribute.id]: item.value\n                                    })}\n                                    className={this.setButtonClassName(attribute.type, item.value, attribute.id)}\n                                    key={item.id}\n                                    style={{ ...attribute.type === \"swatch\" ? { backgroundColor: item.value } : \"\" }}\n                                >\n                                    {attribute.type === \"swatch\" ? \"\" : item.value}\n                                </button>\n                                )}\n                        </div>\n                    </div>\n    \n                )\n            );   \n        }\n        return null;\n    }\n}\n\nconst mapStateToProps = state => {\n    return { \n        products: state.products.list,\n    };\n};\n\nexport default connect(\n    mapStateToProps\n)(ToggleButtons);"]},"metadata":{},"sourceType":"module"}