{"ast":null,"code":"var _jsxFileName = \"/Users/val/work/scandiweb-test/src/components/product/ProductPage.jsx\";\nimport React from \"react\";\nimport Wrapper from \"../Wrapper\";\nimport { connect } from \"react-redux\";\nimport { addCartItem } from '../../redux/actions/cart';\nimport { selectCategory } from '../../redux/actions/categories';\nimport { requestProductById } from '../../redux/actions/products';\nimport ProductWrapper from \"./ProductWrapper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProductPage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      product: undefined\n    };\n  }\n\n  selectAndLoadCategory() {\n    const foundCategory = this.props.categories.find(x => x === this.props.category);\n\n    if (foundCategory) {\n      this.props.selectCategory(foundCategory);\n      this.props.requestProductById(window.location.href.slice(window.location.href.lastIndexOf('/') + 1));\n    } else {\n      window.location.href = '/';\n    }\n  }\n\n  componentDidMount() {\n    this.selectAndLoadCategory();\n  }\n\n  componentDidUpdate() {\n    this.selectAndLoadCategory();\n  }\n\n  static getDerivedStateFromProps(props, current_state) {\n    var _current_state$produc;\n\n    if (((_current_state$produc = current_state.product) === null || _current_state$produc === void 0 ? void 0 : _current_state$produc.id) !== props.product) {\n      return {\n        product: props.products.find(x => x.id === props.product)\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const product = this.props.product;\n    console.log(product);\n\n    if (!product) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"side-images\",\n          children: product.gallery.map(x => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"side-image\",\n            onClick: () => {\n              this.setState({\n                mainImage: x\n              });\n            },\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: x,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 37\n            }, this)\n          }, x, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 58\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), \"=                        \", /*#__PURE__*/_jsxDEV(ProductWrapper, {\n          product: product\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedCurrency: state.currencies.selected,\n    product: state.products.selected,\n    products: state.products.list,\n    categories: state.categories.list\n  };\n};\n\nexport default connect(mapStateToProps, {\n  addCartItem,\n  selectCategory,\n  requestProductById\n})(ProductPage);","map":{"version":3,"sources":["/Users/val/work/scandiweb-test/src/components/product/ProductPage.jsx"],"names":["React","Wrapper","connect","addCartItem","selectCategory","requestProductById","ProductWrapper","ProductPage","Component","constructor","state","product","undefined","selectAndLoadCategory","foundCategory","props","categories","find","x","category","window","location","href","slice","lastIndexOf","componentDidMount","componentDidUpdate","getDerivedStateFromProps","current_state","id","products","render","console","log","gallery","map","setState","mainImage","mapStateToProps","selectedCurrency","currencies","selected","list"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Wrapper from \"../Wrapper\";\nimport { connect } from \"react-redux\";\nimport { addCartItem } from '../../redux/actions/cart';\nimport { selectCategory } from '../../redux/actions/categories';\nimport { requestProductById } from '../../redux/actions/products';\nimport ProductWrapper from \"./ProductWrapper\";\n\n\nclass ProductPage extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            product: undefined,\n        }\n    }\n\n    selectAndLoadCategory() {\n        const foundCategory = this.props.categories.find(x => x === this.props.category);\n        if (foundCategory) {\n            this.props.selectCategory(foundCategory);\n            this.props.requestProductById(window.location.href.slice(window.location.href.lastIndexOf('/') + 1));\n        } else {\n            window.location.href = '/';\n        }\n    }\n\n    componentDidMount() {\n        this.selectAndLoadCategory();\n    }\n\n    componentDidUpdate() {\n        this.selectAndLoadCategory();\n    }\n\n    static getDerivedStateFromProps(props, current_state) {\n        if (current_state.product?.id !== props.product) {\n            return {\n                product: props.products.find(x => x.id === props.product)\n            }\n        }\n        return null\n    }\n\n    render() {\n\n        const product = this.props.product;\n\n        console.log(product)\n        if (!product) {\n            return null;\n        }\n        return (\n                <Wrapper>\n                    <div className=\"wrapper\">\n                        <div className=\"side-images\">\n                            {\n                                product.gallery.map(x => <div key={x}\n                                    className=\"side-image\"\n                                    onClick={() => {\n                                        this.setState({\n                                            mainImage: x\n                                        });\n                                    }}>\n                                    <img src={x} alt=\"\" />\n                                </div>)\n                            }\n                        </div>\n=                        <ProductWrapper product={product} />\n                    </div>\n                </Wrapper>\n            );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        selectedCurrency: state.currencies.selected,\n        product: state.products.selected,\n        products: state.products.list,\n        categories: state.categories.list\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    { addCartItem, selectCategory, requestProductById }\n)(ProductPage);"]},"metadata":{},"sourceType":"module"}