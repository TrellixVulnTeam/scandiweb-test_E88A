{"ast":null,"code":"var _jsxFileName = \"/Users/val/work/scandiweb-test/my-app/src/components/ToggleButtons.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ToggleButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const setButtonClassName = (type, value, id) => {\n      if (this.state[id] === value) {\n        return type === \"swatch\" ? \"attribute-color-active\" : \"attribute-text-active\";\n      } else {\n        return \"attribute-button\";\n      }\n    };\n\n    return this.props.products.map(x => x.map(product => product.id === this.props.product && product.attributes.map(attribute => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"attribute-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: attribute.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"attributes-wrapper\",\n        children: attribute.items.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.setState({\n              [attribute.id]: item.value\n            });\n          },\n          className: setButtonClassName(attribute.type, item.value, attribute.id),\n          ...(attribute.type === \"swatch\" ? style = {\n            backgroundColor: item.value\n          } : ''),\n          children: attribute.type === \"swatch\" ? \"\" : item.value\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 54\n        }, this))\n      }, attribute.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 29\n    }, this))));\n  }\n\n}","map":{"version":3,"sources":["/Users/val/work/scandiweb-test/my-app/src/components/ToggleButtons.js"],"names":["React","ToggleButtons","Component","constructor","props","state","render","setButtonClassName","type","value","id","products","map","x","product","attributes","attribute","items","item","setState","style","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,aAAN,SAA4BD,KAAK,CAACE,SAAlC,CAA4C;AAC/CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AAEH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAMC,kBAAkB,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,EAAd,KAAqB;AAC5C,UAAI,KAAKL,KAAL,CAAWK,EAAX,MAAmBD,KAAvB,EAA8B;AAC1B,eAAOD,IAAI,KAAK,QAAT,GAAoB,wBAApB,GAA+C,uBAAtD;AACH,OAFD,MAEO;AACH,eAAO,kBAAP;AACH;AACJ,KAND;;AAOA,WACI,KAAKJ,KAAL,CAAWO,QAAX,CAAoBC,GAApB,CAAwBC,CAAC,IAAIA,CAAC,CACzBD,GADwB,CACpBE,OAAO,IAAIA,OAAO,CAACJ,EAAR,KAAe,KAAKN,KAAL,CAAWU,OAA1B,IACTA,OAAO,CAACC,UAAR,CACEH,GADF,CACMI,SAAS,iBACV;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,8BACI;AAAA,kBAAKA,SAAS,CAACN;AAAf;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA,kBACKM,SAAS,CAACC,KAAV,CACIL,GADJ,CACQM,IAAI,iBAAI;AACL,UAAA,OAAO,EAAE,MAAM;AACX,iBAAKC,QAAL,CAAc;AACV,eAACH,SAAS,CAACN,EAAX,GAAgBQ,IAAI,CAACT;AADX,aAAd;AAGH,WALI;AAML,UAAA,SAAS,EAAEF,kBAAkB,CAACS,SAAS,CAACR,IAAX,EAAiBU,IAAI,CAACT,KAAtB,EAA6BO,SAAS,CAACN,EAAvC,CANxB;AAAA,cAQDM,SAAS,CAACR,IAAV,KAAmB,QAAnB,GAA8BY,KAAK,GAAC;AAAEC,YAAAA,eAAe,EAAEH,IAAI,CAACT;AAAxB,WAApC,GAAsE,EARrE;AAAA,oBAWAO,SAAS,CAACR,IAAV,KAAmB,QAAnB,GAA8B,EAA9B,GAAmCU,IAAI,CAACT;AAXxC,WAOAS,IAAI,CAACR,EAPL;AAAA;AAAA;AAAA;AAAA,gBADhB;AADL,SAAyCM,SAAS,CAACN,EAAnD;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFL,CAFkB,CAA7B,CADJ;AA2BH;;AA1C8C","sourcesContent":["import React from \"react\";\n\nexport class ToggleButtons extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        }\n    }\n\n    render() {\n        const setButtonClassName = (type, value, id) => {\n            if (this.state[id] === value) {\n                return type === \"swatch\" ? \"attribute-color-active\" : \"attribute-text-active\";\n            } else {\n                return \"attribute-button\";\n            }\n        }\n        return (\n            this.props.products.map(x => x\n                .map(product => product.id === this.props.product\n                    && product.attributes\n                        .map(attribute =>\n                            <div className=\"attribute-buttons\">\n                                <h4>{attribute.id}</h4>\n                                <div className=\"attributes-wrapper\" key={attribute.id}>\n                                    {attribute.items\n                                        .map(item => <button\n                                                onClick={() => {\n                                                    this.setState({\n                                                        [attribute.id]: item.value\n                                                    });\n                                                }}\n                                                className={setButtonClassName(attribute.type, item.value, attribute.id)}\n                                                key={item.id}\n                                                {...attribute.type === \"swatch\" ? style={ backgroundColor: item.value } : ''}\n                                                //style={{ backgroundColor: attribute.type === \"swatch\" ? item.value : \"white\" }}\n                                                >\n                                                    {attribute.type === \"swatch\" ? \"\" : item.value}\n                                                </button>\n                                        )}\n                                </div>\n                            </div>\n\n                        ))))\n    }\n}"]},"metadata":{},"sourceType":"module"}