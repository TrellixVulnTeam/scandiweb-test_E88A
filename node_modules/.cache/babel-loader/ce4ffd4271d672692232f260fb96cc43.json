{"ast":null,"code":"var _jsxFileName = \"/Users/val/work/scandiweb-test/my-app/src/components/category/ProductNames.js\",\n    _s = $RefreshSig$();\n\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ProductNames() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(gql`\n      {\n        category {\n          products {\n            name\n            inStock\n            category\n          }\n        }\n      }\n    `);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 23\n  }, this);\n  return data.category.products.map(({\n    name,\n    category\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: category === 'tech' ? `${name}: ${category}` : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 7\n  }, this));\n}\n\n_s(ProductNames, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductNames;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductNames\");","map":{"version":3,"sources":["/Users/val/work/scandiweb-test/my-app/src/components/category/ProductNames.js"],"names":["ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","useMutation","React","ProductNames","loading","error","data","category","products","map","name"],"mappings":";;;AAAA,SACEA,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,GALF,EAMEC,WANF,QAOO,gBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,SAASC,YAAT,GAAwB;AAAA;;AAC3B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACC,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAV6C,CAAzC;AAYA,MAAII,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,SAAOC,IAAI,CAACC,QAAL,CAAcC,QAAd,CAAuBC,GAAvB,CAA2B,CAAC;AAAEC,IAAAA,IAAF;AAAQH,IAAAA;AAAR,GAAD,kBAChC;AAAA,2BACE;AAAA,gBAEIA,QAAQ,KAAK,MAAb,GAAuB,GAAEG,IAAK,KAAIH,QAAS,EAA3C,GAA+C;AAFnD;AAAA;AAAA;AAAA;AAAA;AADF,KAAUG,IAAV;AAAA;AAAA;AAAA;AAAA,UADK,CAAP;AASH;;GAzBeP,Y;UACqBJ,Q;;;KADrBI,Y","sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql,\n  useMutation,\n} from \"@apollo/client\";\nimport React from \"react\";\n\nexport function ProductNames() {\n    const { loading, error, data } = useQuery(gql`\n      {\n        category {\n          products {\n            name\n            inStock\n            category\n          }\n        }\n      }\n    `);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    return data.category.products.map(({ name, category }) => (\n      <div key={name}>\n        <p>\n        {\n            category === 'tech' ? `${name}: ${category}` : \"\"\n        }\n        </p>\n      </div>\n    ));\n}\n"]},"metadata":{},"sourceType":"module"}