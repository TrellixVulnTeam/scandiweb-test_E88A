{"ast":null,"code":"var _jsxFileName = \"/Users/val/work/scandiweb-test/my-app/src/components/category/ProductNames.js\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ProductNames extends React.Component {\n  render() {\n    const {\n      loading,\n      error,\n      data\n    } = graphql(gql`\n      {\n        category {\n          products {\n            name\n            inStock\n            category\n          }\n        }\n      }\n    `);\n    if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 25\n    }, this);\n    if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error :(\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 23\n    }, this);\n    return data.category.products.map(({\n      name,\n      category\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: category === 'tech' ? `${name}: ${category}` : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this));\n  }\n\n}","map":{"version":3,"sources":["/Users/val/work/scandiweb-test/my-app/src/components/category/ProductNames.js"],"names":["ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","useMutation","React","ProductNames","Component","render","loading","error","data","graphql","category","products","map","name"],"mappings":";AAAA,SACEA,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,GALF,EAMEC,WANF,QAOO,gBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,YAAN,SAA2BD,KAAK,CAACE,SAAjC,CAA2C;AAC9CC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,QAA2BC,OAAO,CAACT,GAAI;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAVgD,CAAxC;AAYJ,QAAIM,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACb,QAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAEX,WAAOC,IAAI,CAACE,QAAL,CAAcC,QAAd,CAAuBC,GAAvB,CAA2B,CAAC;AAAEC,MAAAA,IAAF;AAAQH,MAAAA;AAAR,KAAD,kBAChC;AAAA,6BACE;AAAA,kBAEIA,QAAQ,KAAK,MAAb,GAAuB,GAAEG,IAAK,KAAIH,QAAS,EAA3C,GAA+C;AAFnD;AAAA;AAAA;AAAA;AAAA;AADF,OAAUG,IAAV;AAAA;AAAA;AAAA;AAAA,YADK,CAAP;AASC;;AA1B6C","sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql,\n  useMutation,\n} from \"@apollo/client\";\nimport React from \"react\";\n\nexport class ProductNames extends React.Component {\n    render() {\n        const { loading, error, data } = graphql(gql`\n      {\n        category {\n          products {\n            name\n            inStock\n            category\n          }\n        }\n      }\n    `);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    return data.category.products.map(({ name, category }) => (\n      <div key={name}>\n        <p>\n        {\n            category === 'tech' ? `${name}: ${category}` : ''\n        }\n        </p>\n      </div>\n    ));\n    }  \n}\n"]},"metadata":{},"sourceType":"module"}