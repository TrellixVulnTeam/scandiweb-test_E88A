{"ast":null,"code":"var _jsxFileName = \"/Users/val/work/scandiweb-test/my-app/src/components/cart/CartPage.jsx\";\nimport React from \"react\";\nimport Wrapper from \"../Wrapper\";\nimport { connect } from \"react-redux\";\nimport { addCartItem, removeCartItem } from \"../../redux/actions/cart\";\nimport ToggleButtons from \"../product/ToggleButtons\";\nimport { currenciesSymbols } from \"../../constants\";\nimport { ValuesOfCorrectTypeRule } from \"graphql\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CartPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.setButtonClassName = (type, attr, id, attribute) => {\n      if (attr.value === id[attribute.id]) {\n        return type === \"swatch\" ? \"attribute-color-active\" : \"attribute-text-active\";\n      } else {\n        return \"attribute-button\";\n      }\n    };\n  }\n\n  countCartItems(itemId) {\n    const counts = {};\n    this.props.cartItems.forEach(function (x) {\n      counts[x.id] = (counts[x.id] || 0) + 1;\n    });\n    return counts[itemId];\n  }\n\n  render() {\n    const itemsArray = this.props.cartItems.map(item => item.id);\n    const itemsSet = new Set(itemsArray);\n    return /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"cart-page-title\",\n        children: \"cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), itemsArray.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cart-item-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"product-info product-info-cart\"\n        }, this.props.cartItems[item], false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedCurrency: state.currencies.selected,\n    cartItems: state.cart.list,\n    products: state.products.list\n  };\n};\n\nexport default connect(mapStateToProps, {\n  addCartItem,\n  removeCartItem\n})(CartPage);","map":{"version":3,"sources":["/Users/val/work/scandiweb-test/my-app/src/components/cart/CartPage.jsx"],"names":["React","Wrapper","connect","addCartItem","removeCartItem","ToggleButtons","currenciesSymbols","ValuesOfCorrectTypeRule","CartPage","Component","setButtonClassName","type","attr","id","attribute","value","countCartItems","itemId","counts","props","cartItems","forEach","x","render","itemsArray","map","item","itemsSet","Set","mapStateToProps","state","selectedCurrency","currencies","selected","cart","list","products"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,0BAA5C;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,uBAAT,QAAwC,SAAxC;;;AAEA,MAAMC,QAAN,SAAuBR,KAAK,CAACS,SAA7B,CAAuC;AAAA;AAAA;;AAAA,SAQnCC,kBARmC,GAQd,CAACC,IAAD,EAAOC,IAAP,EAAaC,EAAb,EAAiBC,SAAjB,KAA+B;AAChD,UAAIF,IAAI,CAACG,KAAL,KAAeF,EAAE,CAACC,SAAS,CAACD,EAAX,CAArB,EAAqC;AACjC,eAAOF,IAAI,KAAK,QAAT,GAAoB,wBAApB,GAA+C,uBAAtD;AACH,OAFD,MAEO;AACH,eAAO,kBAAP;AACH;AACJ,KAdkC;AAAA;;AAEnCK,EAAAA,cAAc,CAACC,MAAD,EAAS;AACnB,UAAMC,MAAM,GAAG,EAAf;AACA,SAAKC,KAAL,CAAWC,SAAX,CAAqBC,OAArB,CAA6B,UAAUC,CAAV,EAAa;AAAEJ,MAAAA,MAAM,CAACI,CAAC,CAACT,EAAH,CAAN,GAAe,CAACK,MAAM,CAACI,CAAC,CAACT,EAAH,CAAN,IAAgB,CAAjB,IAAsB,CAArC;AAAyC,KAArF;AACA,WAAOK,MAAM,CAACD,MAAD,CAAb;AACH;;AAUDM,EAAAA,MAAM,GAAG;AAEL,UAAMC,UAAU,GAAG,KAAKL,KAAL,CAAWC,SAAX,CAAqBK,GAArB,CAAyBC,IAAI,IAAIA,IAAI,CAACb,EAAtC,CAAnB;AACA,UAAMc,QAAQ,GAAG,IAAIC,GAAJ,CAAQJ,UAAR,CAAjB;AAEA,wBACI,QAAC,OAAD;AAAA,8BACI;AAAG,QAAA,SAAS,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAIQA,UAAU,CAACC,GAAX,CAAeC,IAAI,iBACf;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,+BACI;AAAsC,UAAA,SAAS,EAAC;AAAhD,WAAU,KAAKP,KAAL,CAAWC,SAAX,CAAqBM,IAArB,CAAV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,CAJR;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAkDH;;AAvEkC;;AA0EvC,MAAMG,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHC,IAAAA,gBAAgB,EAAED,KAAK,CAACE,UAAN,CAAiBC,QADhC;AAEHb,IAAAA,SAAS,EAAEU,KAAK,CAACI,IAAN,CAAWC,IAFnB;AAGHC,IAAAA,QAAQ,EAAEN,KAAK,CAACM,QAAN,CAAeD;AAHtB,GAAP;AAKH,CAND;;AAQA,eAAejC,OAAO,CAClB2B,eADkB,EAElB;AAAE1B,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAFkB,CAAP,CAGbI,QAHa,CAAf","sourcesContent":["import React from \"react\";\nimport Wrapper from \"../Wrapper\";\nimport { connect } from \"react-redux\";\nimport { addCartItem, removeCartItem } from \"../../redux/actions/cart\";\nimport ToggleButtons from \"../product/ToggleButtons\";\nimport { currenciesSymbols } from \"../../constants\";\nimport { ValuesOfCorrectTypeRule } from \"graphql\";\n\nclass CartPage extends React.Component {\n\n    countCartItems(itemId) {\n        const counts = {};\n        this.props.cartItems.forEach(function (x) { counts[x.id] = (counts[x.id] || 0) + 1; });\n        return counts[itemId]\n    }\n\n    setButtonClassName = (type, attr, id, attribute) => {\n        if (attr.value === id[attribute.id]) {\n            return type === \"swatch\" ? \"attribute-color-active\" : \"attribute-text-active\";\n        } else {\n            return \"attribute-button\";\n        }\n    }\n    \n    render() {\n\n        const itemsArray = this.props.cartItems.map(item => item.id)\n        const itemsSet = new Set(itemsArray);\n\n        return (\n            <Wrapper>\n                <p className=\"cart-page-title\">cart</p>\n\n                {\n                    itemsArray.map(item => \n                        <div className=\"cart-item-container\">\n                            <div key={this.props.cartItems[item]} className=\"product-info product-info-cart\">\n                                {/* <h3>{item.brand}</h3>\n                                <p>{item.name}</p>\n                                <p key={Math.random()} className=\"price\">\n                                    {currenciesSymbols[this.props.selectedCurrency] || '$'} {item.prices.find(x => x.currency === this.props.selectedCurrency)?.amount}\n                                </p>\n                                {\n                                    item.attributes.map(attribute => <div className=\"cart-attributes\">\n                                        {\n                                            attribute.items.map(attr => <button\n                                            className={this.setButtonClassName(attribute.type, attr, item.attrValues, attribute)}\n                                            style={{ ...attribute.type === \"swatch\" ? { backgroundColor: attr.value } : \"\" }}\n                                            >{attribute.type === \"swatch\" ? \"\" : attr.value}</button>\n                                        )}\n                                    </div>)\n                                } */}\n                                \n                            </div>\n                            {/* <div className=\"cart-popup-image\">\n                                    <div className=\"cart-popup-amount\">\n                                        <button className=\"cart-popup-button\"\n                                        onClick={() => {\n                                            this.props.addCartItem({ ...item, attrValues: item.attrValues });\n                                        }}>\n                                            +\n                                        </button>\n                                        <p>{this.countCartItems(item.id)}</p>\n                                        <button className=\"cart-popup-button\"\n                                        onClick={() => {\n                                            this.props.removeCartItem(item);\n                                        }}>\n                                            -\n                                        </button>\n                                    </div>\n                                    <div className=\"img-wrapper\">\n                                        <img alt=\"\" src={item.gallery[0]}></img>\n                                    </div>\n                                </div> */}\n                        </div>\n                    )\n                }\n            </Wrapper>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        selectedCurrency: state.currencies.selected,\n        cartItems: state.cart.list,\n        products: state.products.list,\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    { addCartItem, removeCartItem }\n)(CartPage);"]},"metadata":{},"sourceType":"module"}