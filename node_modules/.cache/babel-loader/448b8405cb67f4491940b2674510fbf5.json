{"ast":null,"code":"var _jsxFileName = \"/Users/val/work/scandiweb-test/my-app/src/components/category/Data.js\";\nimport React from \"react\";\nimport { Query } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getRates = gql`\n{\n  category {\n    products {\n      name\n      inStock\n    }\n  }\n}`;\n\nconst Data = () => /*#__PURE__*/_jsxDEV(Query, {\n  query: getRates,\n  children: ({\n    loading,\n    error,\n    data\n  }) => {\n    if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading\\u2026\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 23\n    }, this);\n    if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error :(\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 21\n    }, this);\n    return data.category.products.map(({\n      name,\n      inStock\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `${name}: ${inStock}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }, this)\n    }, name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }, this));\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 14,\n  columnNumber: 3\n}, this);\n\n_c = Data;\nexport default Data;\n\nvar _c;\n\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"sources":["/Users/val/work/scandiweb-test/my-app/src/components/category/Data.js"],"names":["React","Query","gql","getRates","Data","loading","error","data","category","products","map","name","inStock"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AACA,MAAMC,QAAQ,GAAGD,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EARA;;AASA,MAAME,IAAI,GAAG,mBACX,QAAC,KAAD;AAAO,EAAA,KAAK,EAAED,QAAd;AAAA,YACC,CAAC;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAD,KAA8B;AAC/B,QAAIF,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACb,QAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACX,WAAOC,IAAI,CAACC,QAAL,CAAcC,QAAd,CAAuBC,GAAvB,CAA2B,CAAC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,kBAChC;AAAA,6BACE;AAAA,kBAAK,GAAED,IAAK,KAAIC,OAAQ;AAAxB;AAAA;AAAA;AAAA;AAAA;AADF,OAAUD,IAAV;AAAA;AAAA;AAAA;AAAA,YADK,CAAP;AAKC;AATD;AAAA;AAAA;AAAA;AAAA,QADF;;KAAMP,I;AAaN,eAAeA,IAAf","sourcesContent":["import React from \"react\";\nimport { Query } from \"@apollo/client\"\nimport gql from \"graphql-tag\";\nconst getRates = gql`\n{\n  category {\n    products {\n      name\n      inStock\n    }\n  }\n}`;\nconst Data = () => (\n  <Query query={getRates} >\n  {({ loading, error, data }) => {\n  if (loading) return <p>Loadingâ€¦</p>;\n  if (error) return <p>Error :(</p>;\n  return data.category.products.map(({ name, inStock }) => (\n    <div key={name}>\n      <p>{`${name}: ${inStock}`}</p>\n    </div>\n   ));\n  }}\n</Query>\n);\nexport default Data;"]},"metadata":{},"sourceType":"module"}