{"ast":null,"code":"var _jsxFileName = \"/Users/val/work/scandiweb-test/src/components/header/CurrenciesDropdown.jsx\";\nimport React from \"react\";\nimport FontAwesome from \"react-fontawesome\";\nimport { connect } from \"react-redux\";\nimport { selectCurrency, requestCurrencies } from '../../redux/actions/currencies';\nimport { currenciesSymbols } from '../../constants';\nimport { toggleCart } from \"../../redux/actions/cart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CurrenciesDropdown extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleList = () => {\n      this.setState(prevState => ({\n        isListOpen: !prevState.isListOpen\n      }));\n    };\n\n    this.getSymbolForCurrency = currency => currenciesSymbols[currency] || '$';\n\n    this.clickOnCurrency = currency => {\n      this.props.selectCurrency(currency);\n      this.toggleList();\n    };\n\n    this.state = {\n      isListOpen: false\n    };\n    this.ref = /*#__PURE__*/React.createRef();\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  }\n\n  handleClickOutside(event) {\n    console.log(55); // if (this.ref && !this.ref.current.contains(event.target) && this.state.isListOpen === true) {\n    //     this.props.toggleList()\n    // }\n  }\n\n  componentDidMount() {\n    this.props.requestCurrencies();\n  }\n\n  render() {\n    const {\n      isListOpen\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dd-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"dd-header\",\n        onClick: () => {\n          this.toggleList();\n          if (this.props.isCartOpen === true) this.props.toggleCart();\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: isListOpen ? \"dd-header-title open\" : \"dd-header-title\",\n          children: this.getSymbolForCurrency(this.props.selectedCurrency)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), isListOpen ? /*#__PURE__*/_jsxDEV(FontAwesome, {\n          name: \"angle-down\",\n          size: \"2x\",\n          className: \"open\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(FontAwesome, {\n          name: \"angle-up\",\n          size: \"2x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), isListOpen && this.props.list.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        role: \"list\",\n        className: \"dd-list\",\n        ref: this.ref,\n        children: this.props.list.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"dd-list-item\",\n          onClick: () => this.clickOnCurrency(item),\n          children: [this.getSymbolForCurrency(item), \" \", item]\n        }, item, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 64\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isCartOpen: state.cart.isOpen,\n    selectedCurrency: state.currencies.selected,\n    list: state.currencies.list\n  };\n};\n\nexport default connect(mapStateToProps, {\n  requestCurrencies,\n  selectCurrency,\n  toggleCart\n})(CurrenciesDropdown);","map":{"version":3,"sources":["/Users/val/work/scandiweb-test/src/components/header/CurrenciesDropdown.jsx"],"names":["React","FontAwesome","connect","selectCurrency","requestCurrencies","currenciesSymbols","toggleCart","CurrenciesDropdown","Component","constructor","props","toggleList","setState","prevState","isListOpen","getSymbolForCurrency","currency","clickOnCurrency","state","ref","createRef","handleClickOutside","bind","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","event","console","log","render","isCartOpen","selectedCurrency","list","length","map","item","mapStateToProps","cart","isOpen","currencies","selected"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport FontAwesome from \"react-fontawesome\";\nimport { connect } from \"react-redux\";\nimport { selectCurrency, requestCurrencies } from '../../redux/actions/currencies';\nimport { currenciesSymbols } from '../../constants';\nimport { toggleCart } from \"../../redux/actions/cart\"\n\nclass CurrenciesDropdown extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isListOpen: false,\n        };\n        this.ref = React.createRef();\n        this.handleClickOutside = this.handleClickOutside.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    handleClickOutside(event) {\n        console.log(55)\n\n        // if (this.ref && !this.ref.current.contains(event.target) && this.state.isListOpen === true) {\n        //     this.props.toggleList()\n        // }\n    }\n\n    componentDidMount() {\n        this.props.requestCurrencies();\n    }\n\n    toggleList = () => {\n        this.setState((prevState) => ({\n            isListOpen: !prevState.isListOpen,\n        }));\n    };\n\n    getSymbolForCurrency = currency => currenciesSymbols[currency] || '$';\n\n    clickOnCurrency = currency => {\n        this.props.selectCurrency(currency);\n        this.toggleList();\n    }\n\n    render() {\n\n        const { isListOpen } = this.state;\n\n        return (\n            <div className=\"dd-wrapper\">\n                <button type=\"button\" className=\"dd-header\" onClick={() => {\n                    this.toggleList();\n                    if (this.props.isCartOpen === true) this.props.toggleCart();\n                }}>\n                    <div\n                        className={isListOpen ? \"dd-header-title open\" : \"dd-header-title\"}\n                    >\n                        {this.getSymbolForCurrency(this.props.selectedCurrency)}\n                    </div>\n                    {isListOpen ? (\n                        <FontAwesome name=\"angle-down\" size=\"2x\" className=\"open\" />\n                    ) : (\n                        <FontAwesome name=\"angle-up\" size=\"2x\" />\n                    )}\n                </button>\n                {(isListOpen && this.props.list.length > 0) && <div role=\"list\" className=\"dd-list\" ref={this.ref}>\n                    {this.props.list.map((item) => (\n                        <button\n                            type=\"button\"\n                            className=\"dd-list-item\"\n                            key={item}\n                            onClick={() => this.clickOnCurrency(item)}\n                        >\n                            {this.getSymbolForCurrency(item)} {item}\n                        </button>\n                    ))}\n                </div>}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isCartOpen: state.cart.isOpen,\n        selectedCurrency: state.currencies.selected,\n        list: state.currencies.list\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    { requestCurrencies, selectCurrency, toggleCart }\n)(CurrenciesDropdown);"]},"metadata":{},"sourceType":"module"}